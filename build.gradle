plugins {
    // 用作独立项目（A standalone project）
    // 需要把它移动到独立项目的根目录中，而且不能直接在根项目中应用这个自定义插件。

    // 测试发现这上下两个没啥区别，仅有的区别是：如果存在`a.b.c.xxx.gradle`，则同时会生成以`a.b.c.xxx`为 ID 的插件。

    // 用作预编译项目（Precompiled script plugins）
    // 保持当前的目录结构，可以直接在根项目中应用这个自定义插件。
    // 该插件 ID 取`src/main/groovy/`目录下的`a.b.c.xxx.gradle`。
    //id 'java-gradle-plugin'
    id 'groovy-gradle-plugin'
}

// 如下配在可省略，如果存在`a.b.c.xxx.gradle`。
// 如果同时存在`a.b.c.xxx.gradle`，则同时会生成以`a.b.c.xxx`为 ID 的插件。
gradlePlugin {
    plugins {
        simplePlugin {
            id = 'cash.bdo.scalroid'
            implementationClass = 'cash.bdo.ScalaAndroidCompatPlugin'
        }
    }
}

//repositories {
//    mavenCentral()
//}
// 在预编译插件中使用外部插件，需要在此导入，然后在`src/main/groovy/a.b.c.xxx.gradle`文件
// 中写`plugins { id 'com.bmuschko.docker-remote-api' }`。
//dependencies {
//    implementation 'com.bmuschko:gradle-docker-plugin:6.4.0'
//}
